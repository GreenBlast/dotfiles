= Vim tips =
== diff cheat sheet ==

:diffupdate (to remove leftover spacing issues)
:only (once you’re done reviewing all conflicts, this shows only the middle/merged file)
:wq (save and quit)
git add .
git commit -m “Merge resolved”

]c :        - next difference
[c :        - previous difference
do          - diff obtain
dp          - diff put
zo          - open folded text
zc          - close folded text
:diffupdate - re-scan the files for differences


== Search and Replace  ==
Tokenize string:
:s/(\(.*\))/(\1) \1/g

== Misc ==

* gx
Open URL under cursor in your browser

* :retab
Replace TABs with 4 spaces

* :set filetype?
Current filetype

* :edit
Reload the current file (if it was changed outside of vim)

* nvim --startuptime nvim.log
Check what makes vim slow to load

* :map H
What is mapped on H ?

* :verb set expandtab?
If expandtab is not OK, then find out which config file changed it for the last time (verbose)

* :set ft=json
Treat the file as a json file (even if it has a different extension) [ft: filetype]

== Mappings ==

" buffer keys
nnoremap <Leader>bb :b#<CR>
nnoremap <Leader>bn :bn<CR>
nnoremap <Leader>bp :bp<CR>
nnoremap <Leader>bf :bf<CR>
nnoremap <Leader>bl :bl<CR>
nnoremap <Leader>bw :w<CR>:bd<CR>
nnoremap <Leader>bd :bd!<CR>
" new buffer/tab
nnoremap <Leader>e :enew<CR>

" window keys
nnoremap <Leader>w< <C-w><
nnoremap <Leader>w> <C-w>>
nnoremap <Leader>w- <C-w>-
nnoremap <Leader>w+ <C-w>+
nnoremap <Leader>ws :split<CR>
nnoremap <Leader>wv :vsplit<CR>
nnoremap <Leader>wx :close<CR>

" %% to expand active buffer location on cmdline
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'


== Variables ==
* (nothing) In a function: local to a function; otherwise: global
* |buffer-variable|    b:   Local to the current buffer.
* |window-variable|    w:   Local to the current window.
* |tabpage-variable|   t:   Local to the current tab page.
* |global-variable|    g:   Global.
* |local-variable|     l:   Local to a function.
* |script-variable|    s:   Local to a |:source|'ed Vim script.
* |function-argument|  a:   Function argument (only inside a function).
* |vim-variable|       v:   Global, predefined by Vim.

== Plugins ==


=== Vim surround ===

* viw
Visually select the current word
* nnoremap <space> viw
Select the text, press s and type in the surrounding character / tag
* cs'"
Don't select the text, this change ' to "
* ds"
Don't select the text, this delete surrounding "
* dst
Don't select the text, this delete surrounding tags (for ex. <q> and </q>)
* cs'<q>
Don't select the text, this change ' to <q>...</q>
* cst'
Don't select the text, this change surrounding tag to '
* select text, s ]
surround with [ and ] (no space)

=== Vim Easymotion ===

* If your terminal's background is white (light theme), uncomment the following
* To make EasyMotion's cues much easier to read.
{{{viml
hi link EasyMotionTarget String
hi link EasyMotionShade Comment
hi link EasyMotionTarget2First String
hi link EasyMotionTarget2Second Statement
}}}


=== FZF.Vim ===


" Files (similar to :FZF)
Files [PATH]

" Git files (git ls-files)
GFiles [OPTS]

" Git files (git status)
GFiles?

" Open buffers
Buffers

" Color schemes
Colors

" ag search result (ALT-A to select all, ALT-D to deselect all)
Ag [PATTERN]

" Lines in loaded buffers
Lines [QUERY]

" Lines in the current buffer
BLines [QUERY]

" Tags in the project (ctags -R)
Tags [QUERY]

" Tags in the current buffer
BTags [QUERY]

" Marks
Marks

" Windows
Windows

" locate command output
Locate PATTERN

" v:oldfiles and open buffers
History

" Command history
History:

" Search history
History/

" Snippets (UltiSnips)
Snippets

" Git commits (requires fugitive.vim)
Commits

" Git commits for the current buffer
BCommits

" Commands
Commands

" Normal mode mappings
Maps

" Help tags 1
Helptags

" File types
Filetypes
